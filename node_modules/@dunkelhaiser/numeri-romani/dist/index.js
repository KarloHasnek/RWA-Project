"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  RomanNumber: () => RomanNumber,
  arabicize: () => arabicize,
  arabicizeSafe: () => arabicizeSafe,
  isValidArabic: () => isValidArabic,
  isValidArabicSafe: () => isValidArabicSafe,
  isValidRoman: () => isValidRoman,
  isValidRomanSafe: () => isValidRomanSafe,
  romanNumerals: () => romanNumerals,
  romanize: () => romanize,
  romanizeSafe: () => romanizeSafe
});
module.exports = __toCommonJS(src_exports);

// src/utils.ts
var arabicRoman = [
  [1e3, "M"],
  [900, "CM"],
  [500, "D"],
  [400, "CD"],
  [100, "C"],
  [90, "XC"],
  [50, "L"],
  [40, "XL"],
  [10, "X"],
  [9, "IX"],
  [5, "V"],
  [4, "IV"],
  [1, "I"]
];
var romanNumerals = ["I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M"];
var convertToRoman = (num) => {
  let arabicNum = num;
  let romanNum = "";
  arabicRoman.forEach(([arabic, roman]) => {
    while (arabicNum >= arabic) {
      romanNum += roman;
      arabicNum -= arabic;
    }
  });
  return romanNum;
};
var romanize = (num) => {
  isValidArabic(num);
  return convertToRoman(num);
};
var romanizeSafe = (num) => {
  if (!isValidArabicSafe(num))
    return "";
  return convertToRoman(num);
};
var convertToArabic = (num) => {
  let romanNum = num;
  let arabicNum = 0;
  arabicRoman.forEach(([arabic, roman]) => {
    while (romanNum.startsWith(roman)) {
      arabicNum += arabic;
      romanNum = romanNum.slice(roman.length);
    }
  });
  return arabicNum;
};
var arabicize = (num) => {
  isValidRoman(num);
  return convertToArabic(num);
};
var arabicizeSafe = (num) => {
  if (!isValidRomanSafe(num))
    return NaN;
  return convertToArabic(num);
};
var isValidRoman = (num) => {
  if (!isValidRomanSafe(num))
    throw new Error("Invalid roman number");
  return true;
};
var isValidRomanSafe = (num) => {
  return /^\bM{0,3}(?<temp1>CM|CD|D?C{0,3})(?<temp2>XC|XL|L?X{0,3})(?<temp3>IX|IV|V?I{0,3})\b$/.test(num);
};
var isValidArabic = (num) => {
  if (!Number.isInteger(num))
    throw new Error("Cannot convert non-integer number");
  if (num === 0)
    throw new Error("Cannot convert zero");
  if (num < 1)
    throw new Error("Cannot convert negative numbers");
  if (num > 3999)
    throw new Error("Cannot convert numbers greater than 3999");
  return true;
};
var isValidArabicSafe = (num) => {
  return Number.isInteger(num) && num >= 1 && num <= 3999;
};

// src/RomanNumber.ts
var RomanNumber = class {
  value;
  numericValue;
  /**
   * Creates a new RomanNumber instance.
   * @param value The value of the RomanNumber instance. Can be either a arabic number or a roman numberal string.
   */
  constructor(value) {
    if (typeof value === "number") {
      this.value = romanize(value);
      this.numericValue = value;
    } else {
      this.numericValue = arabicize(value);
      this.value = value;
    }
  }
  /**
   * @returns The roman numeral value of the RomanNumber instance.
   */
  getValue() {
    return this.value;
  }
  /**
   * @returns The arabic numeral value of the RomanNumber instance.
   */
  getNumericValue() {
    return this.numericValue;
  }
  /**
   * @returns Object with roman and arabic values of the RomanNumber instance.
   */
  getValues() {
    return { roman: this.value, arabic: this.numericValue };
  }
  /**
   * Sets the roman number and arabic number values of the RomanNumber instance.
   * @param value The value to set. Can be either a arabic number or a roman numeral string.
   */
  setValue(value) {
    if (typeof value === "number") {
      this.value = romanize(value);
      this.numericValue = value;
    } else {
      this.numericValue = arabicize(value);
      this.value = value;
    }
  }
  checkResult(value) {
    if (value > 3999) {
      throw new Error("The result of the operation exceeds 3999");
    }
    if (value < 1) {
      throw new Error("The result of the operation is less than 1");
    }
  }
  calculateResult(value, operation) {
    let tempRes;
    let numericValue;
    if (typeof value === "number") {
      if (!Number.isInteger(value))
        throw new Error("The value must be an integer");
      numericValue = value;
    } else {
      isValidRoman(value);
      numericValue = arabicize(value);
    }
    if (operation === "add") {
      tempRes = this.numericValue + numericValue;
    } else if (operation === "subtract") {
      tempRes = this.numericValue - numericValue;
    } else if (operation === "multiply") {
      tempRes = this.numericValue * numericValue;
    } else if (operation === "divide") {
      tempRes = this.numericValue / numericValue;
      if (tempRes % 1 !== 0)
        throw new Error("The result of the operation is not an integer");
    } else {
      tempRes = this.numericValue ** numericValue;
      if (tempRes % 1 !== 0)
        throw new Error("The result of the operation is not an integer");
    }
    this.checkResult(tempRes);
    this.setValue(tempRes);
  }
  /**
   * Adds a value to the RomanNumber instance.
   * @param value The value to add. Can be either a arabic number or a roman numeral string.
   */
  add(value) {
    this.calculateResult(value, "add");
    return this;
  }
  /**
   * Subtracts a value from the RomanNumber instance.
   * @param value The value to subtract. Can be either a arabic number or a roman numeral string.
   */
  subtract(value) {
    this.calculateResult(value, "subtract");
    return this;
  }
  /**
   * Multiplies a value from the RomanNumber instance.
   * @param value The value to multiply. Can be either a arabic number or a roman numeral string.
   */
  multiply(value) {
    this.calculateResult(value, "multiply");
    return this;
  }
  /**
   * Divides a value from the RomanNumber instance.
   * @param value The value to divide. Can be either a arabic number or a roman numeral string.
   */
  divide(value) {
    this.calculateResult(value, "divide");
    return this;
  }
  /**
   * Raises the RomanNumber instance to a power.
   * @param value The value to raise the RomanNumber instance to. Can be either a arabic number or a roman numeral string.
   */
  exponentiation(value) {
    this.calculateResult(value, "exponentiation");
    return this;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  RomanNumber,
  arabicize,
  arabicizeSafe,
  isValidArabic,
  isValidArabicSafe,
  isValidRoman,
  isValidRomanSafe,
  romanNumerals,
  romanize,
  romanizeSafe
});
